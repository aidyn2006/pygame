import pygame
import random


clock = pygame.time.Clock()
pygame.init()
screen_width = 618
screen_height = 359
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("A | D go")

speed=0
prev_level_count = 0
# background
background_image = pygame.image.load("forest.png").convert_alpha()
background_image = pygame.transform.scale(background_image, (screen_width, screen_height))
bg_x = 0
background_sound = pygame.mixer.Sound("soundles.mp3")
background_sound.play()
gunshot_sound = pygame.mixer.Sound("vistrel.wav.wav")
start_screen_background = pygame.image.load("phone.webp").convert()
start_screen_background = pygame.transform.scale(start_screen_background, (screen_width, screen_height))

# background



# player
player_right = [
    pygame.image.load("player1.png").convert_alpha(),
    pygame.image.load("player2.png").convert_alpha(),
    pygame.image.load("player3.png").convert_alpha(),
    pygame.image.load("player4.png").convert_alpha(),
]
player_left = [
    pygame.image.load("playerl1.png").convert_alpha(),
    pygame.image.load("playerl2.png").convert_alpha(),
    pygame.image.load("playerl3.png").convert_alpha(),
    pygame.image.load("playerl4.png").convert_alpha(),
]
player_anime_count = 0
player_speed = 5
player_x = 150
player_y = 280
is_jump = False
jump_count = 8
# player



#hp
hp_life=pygame.image.load("heart.png").convert_alpha()
hp_width=30
hp_height=30
hp_s=pygame.transform.scale(hp_life, (hp_width, hp_height))
#hp

#bullets
bullet=pygame.image.load("bulle.png").convert_alpha()
bullets=[]
bullet_width = 30
bullet_height = 30
bullet_s = pygame.transform.scale(bullet, (bullet_width, bullet_height)).convert_alpha()
#bullets


#consol razraba
bullets_left=20
score_count=0
level_count=0
hp_count=3

#consol razraba

#ghost
ghost1 = pygame.image.load("ghost1.png").convert_alpha()
new_width = 40
new_height = 50
ghost1_s = pygame.transform.scale(ghost1, (new_width, new_height))
ghost_timer=pygame.USEREVENT+1
pygame.time.set_timer(ghost_timer, 2500)
ghost_list=[]
gameplay=True
#ghost



#karaghost
karaghost=pygame.image.load("karaghost.png").convert_alpha()
kara_width=40
kara_height=50
karaghost_cord=pygame.transform.scale(karaghost,(kara_width,kara_height))
karaghost_time=pygame.USEREVENT+2
pygame.time.set_timer(karaghost_time, 2500)
karaghost_list=[]
#karaghost


#chest
ches=pygame.image.load("chest.png")
chest_width=30
chest_height=30
chest= pygame.transform.scale(ches, (chest_width, chest_height))
chest_timer=pygame.USEREVENT+5
pygame.time.set_timer(chest_timer, 11000)
chest_list=[]
#chest





#consol
label=pygame.font.SysFont('fonts/Roboto-Black.ttf', 60)
lose_label=label.render("GAME OVER",False,(255,0,0))
restart_label=label.render("RESTART",False,(255,0,255))
restart_label_rect=restart_label.get_rect(topleft=(200,200))
#consol




#consol score

bonus_count=0
score = pygame.font.SysFont('fonts/Roboto-Black.ttf', 20)
score1 = pygame.font.SysFont('fonts/Roboto-Black.ttf', 30)
score_label = score.render("SCORE: {}".format(score_count), True, (255, 255, 255))
bullet_label=score.render("BULLET: {}".format(bullets_left), True, (255, 255, 255))
level_label=score.render("LEVEL: {}".format(level_count),True,(255, 255, 255))
bonus_label=score.render("BONUS: {}".format(bonus_count), True, (255, 255, 255))
hp_label = score1.render("{}".format(hp_count), True, (255, 255, 255))
#consol score





#Podskazka oinynga
start_font = pygame.font.SysFont('fonts/Roboto-Black.ttf', 20)
text_lines = [
    "Hello This game A | D go!",
    "You have to run away or shoot at enemies, you have 3 lives and 20 bullets.",
    "There are chests in the game, you have to pick them up to drop bullets and bonuses,",
    "there are 5 levels each level will be a black ghost, and each level their speed increases",
    "Press SPACE to Start"
]
text_height = start_font.get_height() * len(text_lines)
start_y = (screen_height - text_height) // 2
# Podskazka oinynga

#main
black = (0, 0, 0)
line_spacing = 10
running = True
game_started = False

while running:


    if not game_started:
        total_height = len(text_lines) * start_font.get_height()

        # Text
        start_y = (screen_height - total_height) // 2
        screen.blit(start_screen_background, (0, 0))
        for line in text_lines:
            start_label = start_font.render(line, True, (255, 255, 255))
            start_label_rect = start_label.get_rect(center=(screen_width // 2, start_y))
            screen.blit(start_label, start_label_rect)
            background_rect = pygame.Rect(start_label_rect.x - 5, start_label_rect.y - 5, start_label_rect.width + 10,
                                          start_label_rect.height + 10)
            pygame.draw.rect(screen, black, background_rect)

            screen.blit(start_label, start_label_rect)
            start_y += start_font.get_height() + line_spacing
        # Text
    else:
        screen.blit(background_image, (bg_x, 0))
        screen.blit(background_image, (bg_x + 618, 0))
        if gameplay:
            screen.blit(level_label, (165,0))
            screen.blit(score_label,(0,0))
            screen.blit(bonus_label,(240,0))
            screen.blit(hp_s,(580,0))
            screen.blit(hp_label,(590,5))
            player_rect = player_left[0].get_rect(topleft=(player_x,player_y))




            #ghost play
            if ghost_list:
                for (i,el) in enumerate(ghost_list):
                    screen.blit(ghost1_s,(el))
                    el.x-=10
                    if el.x<10:
                        ghost_list.pop(i)
                    if player_rect.colliderect(el):
                        if bonus_count==10:
                            hp_count+=1
                        hp_count -= 1
                        hp_label = score1.render("{}".format(hp_count), True, (255, 255, 255))
                        if hp_count <= 0:
                            gameplay = False
                        ghost_list.pop(i)

            #ghost play




            #chest play
            if chest_list:
                for (i,el) in enumerate(chest_list):
                    screen.blit(chest,(el))
                    el.x-=5

                    if el.x<10:
                        chest_list.pop(i)



                    if player_rect.colliderect(el):
                        bonus_value = random.randint(1, 5)
                        bonus_count += bonus_value
                        bonus_label = score.render("BONUS: {}".format(bonus_count), True, (255, 255, 255))

                        gameplay = True
                        if chest_list:
                            for (ind, gho) in enumerate(chest_list):
                                if el.colliderect(gho):
                                    chest_list.pop(ind)
                        bullets_left+=5
                        bullet_label = score.render("BULLET: {}".format(bullets_left), True, (255, 255, 255))

            #chest play






            #player play
            keys = pygame.key.get_pressed()
            if keys[pygame.K_LEFT]:
                screen.blit(player_left[player_anime_count], (player_x, player_y))
            else:
                screen.blit(player_right[player_anime_count], (player_x, player_y))

            if keys[pygame.K_LEFT] and player_x > 50:
                player_x -= player_speed
            elif keys[pygame.K_RIGHT] and player_x < 300:
                player_x += player_speed


            if not is_jump:
                if keys[pygame.K_SPACE]:
                    is_jump = True
            else:
                if jump_count >= -8:
                    if jump_count > 0:
                        player_y -= (jump_count ** 2) / 2
                    else:
                        player_y += (jump_count ** 2) / 2
                    jump_count -= 1
                else:
                    is_jump = False
                    jump_count = 8


            if player_anime_count == 3:
                player_anime_count = 0
            else:
                player_anime_count += 1

            bg_x -= 2
            if bg_x == -618:
                bg_x = 0
            #player play




            #bullets play
            if bullets:
                for i, el in enumerate(bullets[:]):
                    screen.blit(bullet_s, (el.x, el.y))
                    el.x += 40

                    if el.x > 630:
                        bullets.pop(i)

                    for index, ghos in enumerate(ghost_list[:]):
                        if el.colliderect(ghos):
                            ghost_list.pop(index)
                            if i < len(bullets):
                                bullets.pop(i)
                            score_count += 1
                            score_label = score.render("SCORE: {}".format(score_count), True, (255, 255, 255))
                            bullet_label = score.render("BULLET: {}".format(bullets_left), True, (255, 255, 255))
                            bonus_label = score.render("BONUS: {}".format(bonus_count), True, (255, 255, 255))
                            break

                    for index, karaghost in enumerate(karaghost_list[:]):
                        if el.colliderect(karaghost):
                            karaghost_list.pop(index)
                            if i < len(bullets):
                                bullets.pop(i)
                            score_count += 1
                            score_label = score.render("SCORE: {}".format(score_count), True, (255, 255, 255))
                            bullet_label = score.render("BULLET: {}".format(bullets_left), True, (255, 255, 255))
                            bonus_label = score.render("BONUS: {}".format(bonus_count), True, (255, 255, 255))
                            break
            screen.blit(bullet_label, (80,0))
            #bullets play

            if score_count >=5:
                level_count = score_count // 5
                level_label = score.render("LEVEL: {}".format(level_count), True, (255, 255, 255))
                if karaghost_list:
                    for (i, el) in enumerate(karaghost_list):
                        screen.blit(karaghost_cord, (el))
                        el.x -= 10
                        if el.x < 10:
                            karaghost_list.pop(i)
                        if player_rect.colliderect(el):
                            if bonus_count == 10:
                                hp_count += 1
                            hp_count -= 1
                            hp_label = score1.render("{}".format(hp_count), True, (255, 255, 255))
                            if hp_count <= 0:
                                gameplay = False
                            karaghost_list.pop(i)

            if level_count % 2 == 0:
                if level_count != prev_level_count:

                    speed += 2 * (level_count - prev_level_count)
                    prev_level_count = level_count

                try:
                    with open("high_score.txt", "r") as file:
                        high_score = int(file.read())
                except FileNotFoundError:
                    high_score = 0



                if score_count > high_score:
                    high_score = score_count
                    with open("high_score.txt", "w") as file:
                        file.write(str(high_score))

                #consol shygaru
        else:
            screen.fill('black')
            screen.blit(lose_label, (180, 100))
            screen.blit(restart_label, restart_label_rect)
            mouse = pygame.mouse.get_pos()

            if restart_label_rect.collidepoint(mouse) and pygame.mouse.get_pressed()[0]:
                gameplay = True
                player_x = 150
                ghost_list.clear()
                bullets.clear()
                chest_list.clear()
                karaghost_list.clear()
                bullets_left = 5
                score_count = 0
                level_count = 0
                bonus_count = 0
                hp_count = 3
                hp_label = score.render("HP: {}".format(hp_count), True, (255, 255, 255))
                score_label = score.render("SCORE: {}".format(score_count), True, (255, 255, 255))
                bullet_label = score.render("BULLET: {}".format(bullets_left), True, (255, 255, 255))
                bonus_label = score.render("BONUS: {}".format(bonus_count), True, (255, 255, 255))

        pygame.display.update()
        #consol shygaru




    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                game_started = True
        if event.type == pygame.QUIT:
            running = False
            pygame.quit()
        if event.type == ghost_timer:
            ghost_list.append(ghost1_s.get_rect(topleft = (620, 250)))
        if gameplay and event.type==pygame.KEYUP and event.key == pygame.K_UP and bullets_left>0:
            bullets.append(bullet_s.get_rect(topleft=(player_x+30,player_y+10)))
            bullets_left-=1
            gunshot_sound.play()
        if event.type == chest_timer:
            chest_list.append(chest.get_rect(topleft =(600,300)))
        if event.type ==karaghost_time:
            karaghost_list.append(karaghost_cord.get_rect(topleft = (720, 260)))


    clock.tick(speed+12)
    pygame.display.update()
